openapi: 3.0.0
info:
  title: Diary Application API
  description: REST API for CRUD operations on posts
  version: 1.0.0

servers:
  - url: https://ftrm3yzgn4.execute-api.eu-north-1.amazonaws.com/production

paths:
  /posts:
    get:
      summary: Retrieve all posts
      operationId: getPosts
      security:
        - bearerAuth: []
      parameters:
        - name: tags
          in: query
          description: Filter posts by tags
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Limit the number of posts returned
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: A list of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Create a new post
      operationId: createPost
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPost'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /post/{id}:
    get:
      summary: Retrieve a specific post by ID
      operationId: getPostById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post to retrieve
          schema:
            type: string
      responses:
        '200':
          description: A single post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    patch:
      summary: Update an existing post
      operationId: updatePost
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePost'
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete a post
      operationId: deletePost
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post to delete
          schema:
            type: string
      responses:
        '204':
          description: Post deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /public/posts:
    get:
      summary: Retrieve all public posts
      operationId: getPublicPosts
      responses:
        '200':
          description: A list of public posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicPost'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string

    BadRequest:
      description: Invalid request parameters
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string

    UnprocessableEntity:
      description: Validation error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              details:
                type: string

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              details:
                type: string

  schemas:
    Post:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 200
        body:
          type: string
          maxLength: 2000
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string

    PublicPost:
      type: object
      properties:
        title:
          type: string
          maxLength: 200
        body:
          type: string
          maxLength: 2000
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string

    NewPost:
      type: object
      required:
        - title
        - body
      properties:
        title:
          type: string
          maxLength: 200
        body:
          type: string
          maxLength: 2000
        tags:
          type: array
          items:
            type: string

    UpdatePost:
      type: object
      properties:
        title:
          type: string
          maxLength: 200
        body:
          type: string
          maxLength: 2000
        tags:
          type: array
          items:
            type: string