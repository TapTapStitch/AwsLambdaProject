AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CloudFormation template for Diary Application (REST API with Lambda, API Gateway, DynamoDB, Cognito)

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaDDBAccessRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
        - PolicyName: LambdaDDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/posts'

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: MyUserPool
      AutoVerifiedAttributes:
        - email

  CognitoResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      UserPoolId: !Ref CognitoUserPool
      Identifier: my-resource-server
      Name: MyResourceServer
      Scopes:
        - ScopeName: read
          ScopeDescription: Read access
        - ScopeName: write
          ScopeDescription: Write access

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: MyUserPoolClient
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: true
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - openid
        - profile
        - email
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - https://oauth.pstmn.io/v1/browser-callback
        - https://oauth.pstmn.io/v1/callback
      LogoutURLs:
        - https://www.example.com/logout

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: diary-app
      UserPoolId: !Ref CognitoUserPool

  MyLambdaLayer:
    Type: 'AWS::Serverless::LayerVersion'
    Properties:
      LayerName: my-lambda-layer
      ContentUri: ./lambda_functions/lambda_layer
      CompatibleRuntimes:
        - python3.13
      RetentionPolicy: Retain

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: MyApi
      StageName: dev
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn

  GetPostsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getPosts
      Handler: get_posts.lambda_handler
      Runtime: python3.13
      CodeUri: ./lambda_functions/get_posts
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - Ref: MyLambdaLayer
      Events:
        GetPostsApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /posts
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  GetPostsPublicFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getPostsPublic
      Handler: get_public_posts.lambda_handler
      Runtime: python3.13
      CodeUri: ./lambda_functions/get_public_posts
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - Ref: MyLambdaLayer
      Events:
        GetPostsPublicApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /posts/public
            Method: get
            Auth:
              Authorizer: NONE

  GetPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getPostById
      Handler: get_post.lambda_handler
      Runtime: python3.13
      CodeUri: ./lambda_functions/get_post
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - Ref: MyLambdaLayer
      Events:
        GetPostByIdApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /posts/{postId}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  CreatePostFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: createPost
      Handler: create_post.lambda_handler
      Runtime: python3.13
      CodeUri: ./lambda_functions/create_post
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - Ref: MyLambdaLayer
      Events:
        CreatePostApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /posts
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  UpdatePostFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: updatePost
      Handler: update_post.lambda_handler
      Runtime: python3.13
      CodeUri: ./lambda_functions/update_post
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - Ref: MyLambdaLayer
      Events:
        UpdatePostApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /posts/{postId}
            Method: patch
            Auth:
              Authorizer: CognitoAuthorizer

  DeletePostFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: deletePost
      Handler: delete_post.lambda_handler
      Runtime: python3.13
      CodeUri: ./lambda_functions/delete_post
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - Ref: MyLambdaLayer
      Events:
        DeletePostApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /posts/{postId}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

  PostsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: posts
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com"
  CognitoUserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref CognitoUserPool
  CognitoUserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref CognitoUserPoolClient
  PostsTableName:
    Description: The name of the DynamoDB table
    Value: !Ref PostsTable
  CognitoUserPoolClientSecret:
    Description: "Cognito User Pool Client Secret"
    Value: !GetAtt CognitoUserPoolClient.ClientSecret
